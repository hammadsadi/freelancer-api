// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === User Model ===
model User{
  id String @id @default(uuid())
  name String 
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients Client[]
  projects Project[]
  interactionLogs InteractionLog[]
  reminders Reminder[]
}

// === Client Model ===
model Client{
  id String @id @default(uuid())
  userId String
  name String 
  email String
  phone String
  company String
  notes String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects Project[]
  interactionLogs InteractionLog[]
  reminders Reminder[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

// === Project Model ===
model Project{
  id String @id @default(uuid())
  userId String
  clientId String
  title String 
  budget Int
  deadline DateTime
  status ProjectStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  interactionLogs InteractionLog[]
  reminders Reminder[]

 user User @relation(fields: [userId], references: [id], onDelete: Cascade)  
 client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)  
}

// === InteractionLog Model ===
model InteractionLog{
  id String @id @default(uuid())
  userId String
  clientId String?
  projectId String?
  date DateTime
  type LogType
  notes String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  
 client Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)  
 project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)  
}


// === Reminder Model ===
model Reminder{
  id String @id @default(uuid())
  userId String
  clientId String?
  projectId String?
  title String
  dueDate DateTime
  completed Boolean @default(false)
  notes String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  
 client Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)  
 project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)  
}


// === Enums ===

// Project Status
enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// Log Type
// === Enums ===
enum LogType {
  CALL
  EMAIL
  MEETING
}


